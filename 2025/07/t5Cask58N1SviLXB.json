{
  "active": false,
  "connections": {
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "n8n1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "n8n1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-23T07:47:53.897Z",
  "id": "t5Cask58N1SviLXB",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Github Backup",
  "nodes": [
    {
      "parameters": {},
      "id": "28291623-e083-4165-a1ef-18624853c4fa",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        464,
        -128
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 731.7039821513649,
        "width": 1910.7813046051347,
        "color": 6
      },
      "id": "508577cf-471b-483a-be73-c185f3a3f261",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -16,
        256
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "288e6e27-b58c-4f1d-b99f-101e1cce2d55",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        48,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "dc64a508-08a0-440e-bfb9-0371a8931c28",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        1712,
        464
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "f74e8c3d-3822-4e66-83d4-511b65b436b7",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        736,
        336
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "fb6f5ffb-7f6a-417c-ba8f-0ecea09d4a25",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        432,
        352
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "7f0bea69-9dbf-4215-a8be-83a72c765bc7",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        432,
        624
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "4395269a-60cf-4707-a053-8117d7b76a4e",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        624,
        624
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "d8050deb-c95a-4a18-ba3f-879b5d5a5da3",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1024,
        624
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "6d24a055-32a9-400a-aeee-8d2247900f9b",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1248,
        464
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "d706e071-b924-4a98-abaa-b3859cd9b675",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1248,
        624
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "6ac9232c-d959-40dd-9907-5a05638aea50",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1248,
        816
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "=zlatkomq",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n-backup-zm",
          "mode": "list",
          "cachedResultName": "n8n-backup-zm",
          "cachedResultUrl": "https://github.com/zlatkomq/n8n-backup-zm"
        },
        "filePath": "={{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "5bc2560d-f88b-42eb-bfd7-af951a5c059c",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1472,
        816
      ],
      "typeVersion": 1,
      "webhookId": "4a00849b-d258-4c10-b240-4ba925a87f58",
      "credentials": {
        "githubApi": {
          "id": "8BiPCCXJc0xrRshB",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "zlatkomq",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n-backup-zm",
          "mode": "list",
          "cachedResultName": "n8n-backup-zm",
          "cachedResultUrl": "https://github.com/zlatkomq/n8n-backup-zm"
        },
        "filePath": "={{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "af107211-ac4e-434a-b5a7-20d258f7983d",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1472,
        624
      ],
      "typeVersion": 1,
      "webhookId": "2445aefc-ef7d-4a04-81ff-88ae6db96483",
      "credentials": {
        "githubApi": {
          "id": "8BiPCCXJc0xrRshB",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f303b406-cdda-4a9b-8fee-8bf97c61bf30",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1072,
        -32
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "8328197d-9f12-4dba-a52d-3d5c6c7106a7",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        464,
        80
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "8372ec63-fcdc-4e42-bffa-96b67bae8828",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        832,
        624
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "5b9f0845-3bae-425d-9dab-6be8497b7a75",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -16,
        -208
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416,
        "width": 1473,
        "color": 7
      },
      "id": "d0079674-9743-4957-8d4c-e56bccbad3f2",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        432,
        -208
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "bd649a83-a15a-4945-914f-9352c267bdec",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1296,
        -16
      ],
      "typeVersion": 1,
      "executeOnce": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $json.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "61bb9781-784d-4327-8059-c7a561e70a05",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        224,
        352
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "856f1564-70e9-4ea1-93d5-d6b3e4144d1d",
      "credentials": {
        "githubApi": {
          "id": "8BiPCCXJc0xrRshB",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "=zlatkomq"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "=n8n-backup-zm"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "="
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "a5544811-c4b4-499b-b6ca-36b498379e0e",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        224,
        640
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        864,
        -32
      ],
      "id": "870465e8-e4a6-4fcf-8fa8-cebefda7e821",
      "name": "n8n1",
      "credentials": {
        "n8nApi": {
          "id": "QCnsdeSNngKsecYy",
          "name": "n8n account"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "n8n-backup-zm",
  "repo_owner": "zlatkomq",
  "repo_path": "",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-07-23T07:47:53.897Z",
      "updatedAt": "2025-07-23T07:47:53.897Z",
      "role": "workflow:owner",
      "workflowId": "t5Cask58N1SviLXB",
      "projectId": "NM7VZoSXkcKo262s"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-12T09:24:36.564Z",
  "versionId": "b5c9e73e-acb3-4193-a701-3c9b5eaef01a"
}