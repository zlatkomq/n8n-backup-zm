{
  "active": false,
  "connections": {
    "Fetch Ganttic Resources": {
      "main": [
        [
          {
            "node": "Process Resources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resources - INSERT": {
      "main": [
        [
          {
            "node": "More Res Pages?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Resources": {
      "main": [
        [
          {
            "node": "Generate Facts Vectors",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge VECTORS and Resources",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge VECTORS and Resources": {
      "main": [
        [
          {
            "node": "Resources - INSERT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Truncate Resources": {
      "main": [
        [
          {
            "node": "Set Res Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Res Page": {
      "main": [
        [
          {
            "node": "Fetch Ganttic Resources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "More Res Pages?": {
      "main": [
        [
          {
            "node": "Wait Res",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment Res Page": {
      "main": [
        [
          {
            "node": "Set Res Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Res": {
      "main": [
        [
          {
            "node": "Increment Res Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Truncate Resources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Facts Vectors": {
      "main": [
        [
          {
            "node": "Generate Convo Vectors",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Item with Fact Vectors",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Generate Convo Vectors": {
      "main": [
        [
          {
            "node": "Generate Both Vectors",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Item with Convo Vectors",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Generate Both Vectors": {
      "main": [
        [
          {
            "node": "Merge Item with Fact Vectors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Item with Fact Vectors": {
      "main": [
        [
          {
            "node": "Merge Item with Convo Vectors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Item with Convo Vectors": {
      "main": [
        [
          {
            "node": "Merge VECTORS and Resources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    }
  },
  "createdAt": "2025-03-28T06:40:37.771Z",
  "id": "AJ7uWBwYrUxp7CUA",
  "isArchived": false,
  "meta": null,
  "name": "PAGGINATE_RESOURCES",
  "nodes": [
    {
      "parameters": {
        "url": "https://planner.ganttic.com/api/v1/resources",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "9062f2555255d4e42a69eb2c54bbbcf61a61e03d2881f4480ea3a5e0e842b8f8"
            },
            {
              "name": "includeEmptyDataFields",
              "value": "0"
            },
            {
              "name": "includeReadableDataFieldValues",
              "value": "1"
            },
            {
              "name": "page",
              "value": "={{ $json.page }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8f158e1d-ea59-4579-92e7-0eeb817c75af",
      "name": "Fetch Ganttic Resources",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        480,
        0
      ]
    },
    {
      "parameters": {
        "tableId": "ganttic_api_resources",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('Process Resources').item.json.name }}"
            },
            {
              "fieldId": "skills_senior",
              "fieldValue": "={{ $('Process Resources').item.json.skills_senior }}"
            },
            {
              "fieldId": "industry",
              "fieldValue": "={{ $('Process Resources').item.json.industry }}"
            },
            {
              "fieldId": "description",
              "fieldValue": "={{ $json.description }}"
            },
            {
              "fieldId": "skills_medium",
              "fieldValue": "={{ $json.skills_medium }}"
            },
            {
              "fieldId": "skills_junior",
              "fieldValue": "={{ $json.skills_junior }}"
            },
            {
              "fieldId": "section",
              "fieldValue": "={{ $json.section }}"
            },
            {
              "fieldId": "seniority",
              "fieldValue": "={{ $json.seniority }}"
            },
            {
              "fieldId": "team",
              "fieldValue": "={{ $json.team }}"
            },
            {
              "fieldId": "department",
              "fieldValue": "={{ $json.department }}"
            },
            {
              "fieldId": "vertical",
              "fieldValue": "={{ $json.vertical }}"
            },
            {
              "fieldId": "coe_manager",
              "fieldValue": "={{ $json.coe_manager }}"
            },
            {
              "fieldId": "el",
              "fieldValue": "={{ $json.el }}"
            },
            {
              "fieldId": "eh",
              "fieldValue": "={{ $json.eh }}"
            },
            {
              "fieldId": "director",
              "fieldValue": "={{ $json.director }}"
            },
            {
              "fieldId": "employment_type",
              "fieldValue": "={{ $json.employment_type }}"
            },
            {
              "fieldId": "certs",
              "fieldValue": "={{ $json.certs }}"
            },
            {
              "fieldId": "notes",
              "fieldValue": "={{ $json.note }}"
            },
            {
              "fieldId": "embedding_full",
              "fieldValue": "={{ $json.embedding_2 }}"
            },
            {
              "fieldId": "embedding_facts",
              "fieldValue": "={{ $json.embedding_2_1 }}"
            },
            {
              "fieldId": "embedding_convo",
              "fieldValue": "={{ $json.embedding_1_1 }}"
            },
            {
              "fieldId": "full_payload",
              "fieldValue": "={{ $json.full_payload }}"
            },
            {
              "fieldId": "embedding_convo_text",
              "fieldValue": "={{ $json.embedding_convo_text }}"
            },
            {
              "fieldId": "embedding_facts_text",
              "fieldValue": "={{ $json.embedding_facts_text }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        384,
        608
      ],
      "id": "56be2cc1-dea7-47ce-93d5-4969f6517e4a",
      "name": "Resources - INSERT",
      "credentials": {
        "supabaseApi": {
          "id": "Vbtfas1bVCzZ2Wde",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process resources\nconst item = items[0];\nconst resources = item.json.items || [];\n\nreturn resources.map(resource => {\n  // skills senior\n  const skills_senior = [];\n  const ssFields = resource.dataFields?.multiSelect?.find(t => t.id === '124830');\n  if (ssFields?.values) {\n      ssFields.values.forEach(v => {\n          if (v.readableValue && !skills_senior.includes(v.readableValue)) {\n              skills_senior.push(v.readableValue);\n          }\n      });\n  }\n  // skills midium\n  const skills_medium = [];\n  const smFields = resource.dataFields?.multiSelect?.find(t => t.id === '124831');\n  if (smFields?.values) {\n      smFields.values.forEach(v => {\n          if (v.readableValue && !skills_medium.includes(v.readableValue)) {\n              skills_medium.push(v.readableValue);\n          }\n      });\n  }\n\n  // skills junior\n  const skills_junior = [];\n  const sjFields = resource.dataFields?.multiSelect?.find(t => t.id === '124832');\n  if (sjFields?.values) {\n      sjFields.values.forEach(v => {\n          if (v.readableValue && !skills_junior.includes(v.readableValue)) {\n              skills_junior.push(v.readableValue);\n          }\n      });\n  }\n\n  // get certs\n  const certs = [];\n  const certFields = resource.dataFields?.multiSelect?.find(t => t.id === '126853');\n  if (certFields?.values) {\n      certFields.values.forEach(v => {\n          if (v.readableValue && !certs.includes(v.readableValue)) {\n              certs.push(v.readableValue);\n          }\n      });\n  }\n  \n  // Extract industries\n  const industriesarr = [];\n  const industryField = resource.dataFields?.multiSelect?.find(ms => \n      ms.readableValue === 'Industry Expertise'\n  );\n  if (industryField?.values) {\n    industryField.values.forEach(v => {\n      if (v.readableValue) {\n        industriesarr.push(v.readableValue);\n      }\n    });\n  }\n\n  // Get description\n  const descField = resource.dataFields?.texts?.find(t => t.id === '121631');\n  let description = descField?.text ?? '';\n\n  // Get notes\n  const noteField = resource.dataFields?.texts?.find(t => t.id === '123740');\n  let note = noteField?.text ?? '';\n\n\n  // Get Section\n  const secField = resource.dataFields.listValues?.find(t => t.id === '114287');\n  let section = secField?.readableValue ?? '';\n\n  // Get seniority\n  const senField = resource.dataFields?.listValues?.find(t => t.id === '115797')\n  let seniority = senField?.readableValue ?? '';\n\n  // Get team\n  const teamField = resource.dataFields?.listValues?.find(t => t.id === '120128')\n  let team = teamField?.readableValue ?? '';\n  \n  // Get department\n  const departmentField = resource.dataFields?.listValues?.find(t => t.id === '124673')\n  let department = departmentField?.readableValue ?? '';\n  \n  // Get vertical\n  const verticalField = resource.dataFields?.listValues?.find(t => t.id === '124674')\n  let vertical = verticalField?.readableValue ?? '';\n  \n  // Get coe_manager\n  const coe_managerField = resource.dataFields?.listValues?.find(t => t.id === '124407')\n  let coe_manager = coe_managerField?.readableValue ?? '';\n  \n  // Get el\n  const elField = resource.dataFields?.listValues?.find(t => t.id === '124300')\n  let el = elField?.readableValue ?? '';\n  \n  // Get eh\n  const ehField = resource.dataFields?.listValues?.find(t => t.id === '124301')\n  let eh = ehField?.readableValue ?? '';\n  \n  // Get director\n  const directorField = resource.dataFields?.listValues?.find(t => t.id === '124302')\n  let director = directorField?.readableValue ?? '';\n  \n  // Get employment_type\n  const employment_typeField = resource.dataFields?.listValues?.find(t => t.id === '124741')\n  let employment_type = employment_typeField?.readableValue ?? '';\n\n\n  /**\n   * Zlatko import for post processing and embed prep\n   */\n\n  // Extract all available fields from the input\n  const resourceId = resource.id;\n  const resourceName = resource.name;\n  const technicalDomain = section;\n  const globalSeniority = seniority;\n  const coeManager = coe_manager;\n  const engineeringLead = el;\n  const engineeringHead = eh;\n  const employmentType = employment_type;\n  const skillSeniorLevel = skills_senior.join(\", \") || \"\";\n  const skillMidLevel = skills_medium.join(\", \") || \"\"\n  const skillJuniorLevel = skills_junior.join(\", \") || \"\";\n  const industryExpertise = industriesarr.join(\", \") || \"\";\n  const domainKnowledge = description;\n  const certificates = certs.join(\", \") || \"\";\n    \n\n      // Universal parser function that handles parentheses, brackets, and quoted text\n    const smartParse = (textString) => {\n        if (!textString) return [];\n        \n        const results = [];\n        let currentItem = '';\n        let insideParentheses = 0;  // Track nested parentheses\n        let insideBrackets = 0;     // Track nested brackets\n        let insideQuotes = false;   // Track quoted text\n        \n        // Process character by character\n        for (let i = 0; i < textString.length; i++) {\n            const char = textString[i];\n            \n            // Handle different states\n            if (char === '(') {\n                insideParentheses++;\n                currentItem += char;\n            } else if (char === ')') {\n                insideParentheses = Math.max(0, insideParentheses - 1); // Guard against mismatched parentheses\n                currentItem += char;\n            } else if (char === '[') {\n                insideBrackets++;\n                currentItem += char;\n            } else if (char === ']') {\n                insideBrackets = Math.max(0, insideBrackets - 1); // Guard against mismatched brackets\n                currentItem += char;\n            } else if (char === '\"' || char === \"'\") {\n                insideQuotes = !insideQuotes;\n                currentItem += char;\n            } else if (char === ',' && !insideParentheses && !insideBrackets && !insideQuotes) {\n                // Only split on commas when not inside special characters\n                results.push(currentItem.trim());\n                currentItem = '';\n            } else {\n                currentItem += char;\n            }\n        }\n        \n        // Add the last item if there is one\n        if (currentItem.trim()) {\n            results.push(currentItem.trim());\n        }\n        \n        // Post-processing: Handle special formats and clean up\n        return results\n            .map(item => {\n                // Clean up quote marks if they balance at beginning/end\n                if ((item.startsWith('\"') && item.endsWith('\"')) || \n                    (item.startsWith(\"'\") && item.endsWith(\"'\"))) {\n                    item = item.slice(1, -1).trim();\n                }\n                \n                // Remove any trailing dots or punctuation\n                return item.replace(/[.,;]+$/, '').trim();\n            })\n            .filter(Boolean);\n    };\n    \n    // Clean and standardize a skill/domain string\n    const cleanField = (text) => {\n        if (!text) return text;\n        \n        // Remove redundant whitespace\n        text = text.replace(/\\s+/g, ' ').trim();\n        \n        // Standardize common variations (could be expanded based on your data)\n        const standardizations = {\n            'Javascript': 'JavaScript',\n            'React.js': 'React',\n            'React.JS': 'React',\n            'ReactJS': 'React',\n            'Node.js': 'Node.js',\n            'NodeJS': 'Node.js',\n            'Artificial Intelligence': 'AI',\n            'Machine Learning': 'ML',\n            '.NET Core': '.NET Core',\n            '.Net Core': '.NET Core',\n            'Devops': 'DevOps',\n            'CI/CD': 'CI/CD',\n            'CI / CD': 'CI/CD',\n            'Front-end': 'Frontend',\n            'Front end': 'Frontend',\n            'Back-end': 'Backend',\n            'Back end': 'Backend',\n            'Next.js': 'Next.js',\n            'NextJS': 'Next.js',\n            'Vue.js': 'Vue.js',\n            'VueJS': 'Vue.js',\n            'Express.js': 'Express',\n            'ExpressJS': 'Express'\n        };\n        \n        // Apply standardizations\n        Object.keys(standardizations).forEach(key => {\n            // Use word boundaries for more precise replacement\n            const regex = new RegExp(`\\\\b${key}\\\\b`, 'gi');\n            text = text.replace(regex, standardizations[key]);\n        });\n        \n        return text;\n    };\n    \n    // Extract role category from technical domain\n    const extractRoleCategory = (technicalDomain) => {\n        if (!technicalDomain) return \"Other\";\n        \n        const domainLower = technicalDomain.toLowerCase();\n        \n        // Map technical domains to general role categories\n        if (domainLower === 'ba' || domainLower.includes('business analyst')) {\n            return 'Business Analyst';\n        }\n        if (domainLower === 'pm' || domainLower.includes('project manager')) {\n            return 'Project Manager';\n        }\n        if (domainLower === 'po' || domainLower.includes('product owner')) {\n            return 'Product Owner';\n        }\n        if (domainLower === 'sa' || domainLower.includes('solution architect')) {\n            return 'Solution Architect';\n        }\n        if (domainLower.includes('frontend') || domainLower === 'fe' || \n            domainLower.includes('react') || domainLower.includes('angular') || \n            domainLower.includes('vue') || domainLower.includes('slice')) {\n            return 'Frontend Developer';\n        }\n        if (domainLower.includes('backend') || domainLower === 'be' || \n            domainLower.includes('java') || domainLower.includes('php') || \n            domainLower.includes('python') || domainLower.includes('.net') || \n            domainLower.includes('node') || domainLower.includes('ruby') ||\n            domainLower.includes('cms')) {\n            return 'Backend Developer';\n        }\n        if (domainLower.includes('fullstack') || domainLower === 'fs' || \n            domainLower.includes('full stack') || domainLower.includes('full-stack')) {\n            return 'Full Stack Developer';\n        }\n        if (domainLower.includes('mobile') || domainLower.includes('android') || \n            domainLower.includes('ios') || domainLower.includes('flutter') || \n            domainLower.includes('react native')) {\n            return 'Mobile Developer';\n        }\n        if (domainLower.includes('devops') || domainLower.includes('sre') || \n            domainLower.includes('infrastructure') || domainLower.includes('cloud')) {\n            return 'DevOps Engineer';\n        }\n        if (domainLower === 'qa' || domainLower.includes('test') || \n            domainLower.includes('quality')) {\n            return 'QA Engineer';\n        }\n        if (domainLower.includes('data') || domainLower.includes('bi') || \n            domainLower.includes('business intelligence')) {\n            return 'Data Engineer';\n        }\n        if (domainLower === 'data science' || domainLower.includes('ml') || domainLower.includes('ai') || \n            domainLower.includes('machine learning') || domainLower.includes('data science')) {\n            return 'AI/ML Engineer';\n        }\n        if (domainLower.includes('design') || domainLower.includes('ux') || domainLower.includes('ui')) {\n            return 'UI/UX Designer';\n        }\n        if (domainLower.includes('support')) {\n            return 'Support Engineer';\n        }\n        \n        // Return the original technical domain if no mapping found\n        return technicalDomain;\n    };\n    \n    // Extract additional technical skills from domain knowledge\n    const extractTechnicalDetails = (domainKnowledge) => {\n        if (!domainKnowledge) return { tools: [], technologies: [], methodologies: [] };\n        \n        // Common tools, technologies and methodologies to look for\n        const tools = [\n            'Jira', 'Confluence', 'Azure DevOps', 'GitHub', 'GitLab', 'Bitbucket',\n            'Jenkins', 'TeamCity', 'Travis CI', 'CircleCI', 'Bamboo',\n            'Slack', 'Microsoft Teams', 'Asana', 'Trello', 'Monday',\n            'Figma', 'Sketch', 'Adobe XD', 'InVision', 'Zeplin',\n            'Power BI', 'Tableau', 'Looker', 'Grafana', 'Kibana',\n            'Postman', 'Swagger', 'SonarQube', 'Selenium', 'BPMN', 'UML',\n            'Axure', 'Adobe Photoshop', 'Adobe Illustrator', 'InDesign'\n        ];\n        \n        const technologies = [\n            'React', 'Angular', 'Vue', 'Next.js', 'Nuxt', 'Svelte',\n            'Node.js', 'Express', 'Django', 'Flask', 'Spring Boot', 'Laravel', 'ASP.NET',\n            'MongoDB', 'PostgreSQL', 'MySQL', 'SQL Server', 'Oracle', 'DynamoDB', 'Cassandra',\n            'Docker', 'Kubernetes', 'AWS', 'Azure', 'GCP', 'Terraform', 'Ansible', 'Puppet',\n            'TensorFlow', 'PyTorch', 'Keras', 'scikit-learn', 'pandas', 'NumPy',\n            'Hadoop', 'Spark', 'Kafka', 'Airflow', 'Databricks',\n            'REST', 'GraphQL', 'SOAP', 'API', 'Microservices', 'ERP', 'CRM',\n            'Firebase', 'Cognito', 'Auth0', 'Mobile banking', 'Payment gateway'\n        ];\n        \n        const methodologies = [\n            'Agile', 'Scrum', 'Kanban', 'SAFe', 'Waterfall', 'Lean', 'DevOps',\n            'CI/CD', 'TDD', 'BDD', 'DDD', 'Microservices', 'Serverless',\n            'User research', 'Design thinking', 'User-centered design',\n            'Data modeling', 'ETL', 'Data warehousing', 'OLAP',\n            'Product discovery', 'User story mapping', 'Requirements elicitation',\n            'Business analysis', 'Product ownership', 'Continuous integration'\n        ];\n        \n        // Extract matches\n        const findMatches = (text, terms) => {\n            const matches = [];\n            const lowerText = text.toLowerCase();\n            \n            terms.forEach(term => {\n                if (lowerText.includes(term.toLowerCase())) {\n                    matches.push(term);\n                }\n            });\n            \n            return [...new Set(matches)]; // Remove duplicates\n        };\n        \n        return {\n            tools: findMatches(domainKnowledge, tools),\n            technologies: findMatches(domainKnowledge, technologies),\n            methodologies: findMatches(domainKnowledge, methodologies)\n        };\n    };\n    \n    // Determine seniority level based on Global Seniority \n    const determineSeniorityLevel = (globalSeniority) => {\n        // If global seniority is not available, return unknown\n        if (!globalSeniority) return \"Unknown\";\n        \n        const seniorityLower = globalSeniority.toLowerCase();\n        \n        if (seniorityLower.includes('senior')) {\n            // Extract number if available (e.g., \"Senior 2\" -> 2)\n            const seniorityNum = seniorityLower.match(/\\d+/);\n            if (seniorityNum) {\n                return `Senior ${seniorityNum[0]}`;\n            }\n            return \"Senior\";\n        }\n        \n        if (seniorityLower.includes('mid')) {\n            // Extract number if available (e.g., \"Mid 2\" -> 2)\n            const midNum = seniorityLower.match(/\\d+/);\n            if (midNum) {\n                return `Mid ${midNum[0]}`;\n            }\n            return \"Mid\";\n        }\n        \n        if (seniorityLower.includes('junior')) {\n            // Extract number if available (e.g., \"Junior 2\" -> 2)\n            const juniorNum = seniorityLower.match(/\\d+/);\n            if (juniorNum) {\n                return `Junior ${juniorNum[0]}`;\n            }\n            return \"Junior\";\n        }\n        \n        if (seniorityLower.includes('head')) {\n            return \"Head\";\n        }\n        \n        if (seniorityLower.includes('manager')) {\n            return \"Manager\";\n        }\n        \n        // Return original if no mapping\n        return globalSeniority;\n    };\n    \n    // Determine if the person is a manager or lead\n    const isLeadOrManager = (globalSeniority, engineeringLead, coeManager) => {\n        if (!globalSeniority && !engineeringLead && !coeManager) return false;\n        \n        // Check if global seniority indicates management position\n        if (globalSeniority && (\n            globalSeniority.toLowerCase().includes('manager') ||\n            globalSeniority.toLowerCase().includes('head')\n        )) {\n            return true;\n        }\n        \n        // Check if they are listed as engineering lead for anyone\n        if (engineeringLead && engineeringLead === resourceName) {\n            return true;\n        }\n        \n        // Check if they are listed as COE manager for anyone\n        if (coeManager && coeManager === resourceName) {\n            return true;\n        }\n        \n        return false;\n    };\n    \n    // Create skills arrays\n    const skills = {\n        senior: smartParse(skillSeniorLevel).map(cleanField),\n        mid: smartParse(skillMidLevel).map(cleanField),\n        junior: smartParse(skillJuniorLevel).map(cleanField)\n    };\n    \n    // Extract all skills for quick access and filtering\n    const allSkills = [\n        ...skills.senior.map(skill => ({ skill, level: 'senior' })),\n        ...skills.mid.map(skill => ({ skill, level: 'mid' })),\n        ...skills.junior.map(skill => ({ skill, level: 'junior' }))\n    ];\n    \n    // Get flat list of skills\n    const flatSkills = allSkills.map(s => s.skill);\n    \n    // Extract technical details from domain knowledge\n    const technicalDetails = extractTechnicalDetails(domainKnowledge);\n    \n    // Add extracted technical details to all_skills if not already present\n    technicalDetails.tools.forEach(tool => {\n        if (!flatSkills.includes(tool)) {\n            flatSkills.push(tool);\n        }\n    });\n    \n    technicalDetails.technologies.forEach(tech => {\n        if (!flatSkills.includes(tech)) {\n            flatSkills.push(tech);\n        }\n    });\n    \n    technicalDetails.methodologies.forEach(method => {\n        if (!flatSkills.includes(method)) {\n            flatSkills.push(method);\n        }\n    });\n    \n    // Determine primary skill areas based on skills\n    const identifyPrimarySkillAreas = (allSkills) => {\n        const skillGroups = {\n            'Frontend': ['React', 'Angular', 'Vue', 'JavaScript', 'TypeScript', 'HTML', 'CSS', 'SASS', 'LESS', 'Redux', 'Next.js'],\n            'Backend': ['Java', 'Spring', 'Python', 'Django', 'FastAPI', 'PHP', 'Laravel', 'Symfony', 'C#', '.NET', 'Node.js', 'Express', 'Ruby', 'Rails'],\n            'Database': ['SQL', 'PostgreSQL', 'MySQL', 'MongoDB', 'DynamoDB', 'Elasticsearch', 'Redis', 'Cassandra'],\n            'DevOps': ['Docker', 'Kubernetes', 'AWS', 'Azure', 'GCP', 'CI/CD', 'Jenkins', 'Terraform', 'Ansible'],\n            'Mobile': ['Android', 'iOS', 'Swift', 'Kotlin', 'Flutter', 'React Native'],\n            'AI/ML': ['TensorFlow', 'PyTorch', 'ML', 'AI', 'NLP', 'Computer Vision', 'Data Science'],\n            'Testing': ['QA', 'Selenium', 'Cypress', 'Jest', 'Testing', 'TDD', 'BDD', 'JUnit', 'PyTest'],\n            'Management': ['Agile', 'Scrum', 'Kanban', 'Project Management', 'Product Management', 'JIRA', 'Business Analysis'],\n            'Design': ['UI', 'UX', 'Figma', 'Sketch', 'Adobe XD', 'Photoshop', 'Illustrator']\n        };\n        \n        // Count occurrences of skills in each area\n        const areaScores = {};\n        Object.keys(skillGroups).forEach(area => {\n            areaScores[area] = 0;\n            skillGroups[area].forEach(skill => {\n                allSkills.forEach(userSkill => {\n                    if (userSkill.toLowerCase().includes(skill.toLowerCase())) {\n                        areaScores[area]++;\n                    }\n                });\n            });\n        });\n        \n        // Return areas with at least one skill match, sorted by score\n        const matchedAreas = Object.keys(areaScores)\n            .filter(area => areaScores[area] > 0)\n            .sort((a, b) => areaScores[b] - areaScores[a]);\n        \n        return matchedAreas;\n    };\n    \n    // Get role category from technical domain\n    const roleCategory = extractRoleCategory(technicalDomain);\n    \n    // Get seniority level\n    const seniorityLevel = determineSeniorityLevel(globalSeniority);\n    \n    // Check if the person is a lead or manager\n    const isLeadOrManagerRole = isLeadOrManager(globalSeniority, engineeringLead, coeManager);\n    \n    // Get primary skill areas\n    const primarySkillAreas = identifyPrimarySkillAreas(flatSkills);\n    \n    // Parse industries\n    const industries = smartParse(industryExpertise).map(cleanField);\n    \n    // Parse certificates\n    const certificatesList = smartParse(certificates).map(cleanField);\n    \n    // Extract organizational structure\n    const orgStructure = {\n        team: team,\n        department: department,\n        vertical: vertical,\n        reports_to: {\n            engineering_lead: engineeringLead !== resourceName ? engineeringLead : null,\n            coe_manager: coeManager,\n            engineering_head: engineeringHead,\n            director: director\n        },\n        is_lead_or_manager: isLeadOrManagerRole\n    };\n    \n    // Build natural language descriptions for better LLM understanding\n    \n    // 1. Role description\n    let roleDescription = `${resourceName} is a ${roleCategory}`;\n    if (globalSeniority) {\n        roleDescription += ` with ${globalSeniority} seniority`;\n    }\n    if (isLeadOrManagerRole) {\n        roleDescription += ` in a leadership position`;\n    }\n    if (primarySkillAreas.length > 0) {\n        roleDescription += ` specializing in ${primarySkillAreas.slice(0, 2).join(' and ')}`;\n    }\n    roleDescription += `.`;\n    \n    // 2. Skills description\n    let skillsDescription = \"\";\n    \n    if (skills.senior.length > 0) {\n        skillsDescription += `Has senior-level expertise in ${skills.senior.join(', ')}.`;\n    }\n    \n    if (skills.mid.length > 0) {\n        skillsDescription += ` Proficient in ${skills.mid.join(', ')}.`;\n    }\n    \n    if (skills.junior.length > 0) {\n        skillsDescription += ` Also familiar with ${skills.junior.join(', ')}.`;\n    }\n    \n    // 3. Industry description\n    let industryDescription = \"\";\n    if (industries.length > 0) {\n        industryDescription = `Has experience in the following industries: ${industries.join(', ')}.`;\n    }\n    \n    // 4. Organizational context\n    let orgDescription = \"\";\n    if (team || department || vertical) {\n        orgDescription = `Works in ${team || 'the company'}`;\n        if (department) {\n            orgDescription += `, part of ${department}`;\n        }\n        if (vertical) {\n            orgDescription += ` within the ${vertical} vertical`;\n        }\n        orgDescription += '.';\n    }\n    \n    // 5. Management chain\n    let managementDescription = \"\";\n    if (coeManager || engineeringLead || engineeringHead || director) {\n        const managers = [];\n        if (engineeringLead && engineeringLead !== resourceName) managers.push(`Engineering Lead: ${engineeringLead}`);\n        if (coeManager) managers.push(`COE Manager: ${coeManager}`);\n        if (engineeringHead) managers.push(`Engineering Head: ${engineeringHead}`);\n        if (director) managers.push(`Director: ${director}`);\n        \n        if (managers.length > 0) {\n            managementDescription = `Reports to ${managers.join(', ')}.`;\n        }\n    }\n    \n    // 6. Domain knowledge, technical tools and certificates\n    let expertiseDescription = \"\";\n    \n    if (technicalDetails.tools.length > 0 || \n        technicalDetails.technologies.length > 0 || \n        technicalDetails.methodologies.length > 0) {\n        \n        if (technicalDetails.tools.length > 0) {\n            expertiseDescription += `Experienced with tools: ${technicalDetails.tools.join(', ')}. `;\n        }\n        \n        if (technicalDetails.technologies.length > 0) {\n            expertiseDescription += `Familiar with technologies: ${technicalDetails.technologies.join(', ')}. `;\n        }\n        \n        if (technicalDetails.methodologies.length > 0) {\n            expertiseDescription += `Follows methodologies: ${technicalDetails.methodologies.join(', ')}. `;\n        }\n    }\n    \n    if (domainKnowledge) {\n        expertiseDescription += `Domain knowledge: ${domainKnowledge} `;\n    }\n    \n    if (certificatesList.length > 0) {\n        expertiseDescription += `Holds certifications in: ${certificatesList.join(', ')}.`;\n    }\n    \n    // 7. Create conversation-friendly search text\n    // This is optimized for natural language questions to the LLM\n    const conversationText = `\n    ${roleDescription}\n    ${skillsDescription}\n    ${industryDescription}\n    ${orgDescription}\n    ${managementDescription}\n    ${expertiseDescription}\n    ${note ? 'Additional info: ' + note : ''}\n    `.trim();\n    \n    // 8. Create structured embedding text (for vector search)\n    const structuredParts = [];\n    \n    // Start with name, technical domain and role category\n    structuredParts.push(`Resource: ${resourceName} | ID: ${resourceId} | Technical Domain: ${technicalDomain} | Role: ${roleCategory} | Seniority: ${globalSeniority}`);\n    \n    // Add team info\n    if (team || department || vertical) {\n        structuredParts.push(`Organization: ${vertical || ''} | ${department || ''} | ${team || ''}`);\n    }\n    \n    // Add management\n    if (coeManager || engineeringLead || engineeringHead || director) {\n        structuredParts.push(`Management: ${engineeringLead !== resourceName ? engineeringLead : ''} | ${coeManager} | ${engineeringHead} | ${director}`);\n    }\n    \n    // Add primary skill areas\n    if (primarySkillAreas.length > 0) {\n        structuredParts.push(`Primary Skill Areas: ${primarySkillAreas.join(', ')}`);\n    }\n    \n    // Add skills by level\n    if (skills.senior.length > 0) {\n        structuredParts.push(`Senior Skills: ${skills.senior.join(', ')}`);\n    }\n    \n    if (skills.mid.length > 0) {\n        structuredParts.push(`Mid Skills: ${skills.mid.join(', ')}`);\n    }\n    \n    if (skills.junior.length > 0) {\n        structuredParts.push(`Junior Skills: ${skills.junior.join(', ')}`);\n    }\n    \n    // Add industries\n    if (industries.length > 0) {\n        structuredParts.push(`Industries: ${industries.join(', ')}`);\n    }\n    \n    // Add extracted tools and technologies\n    if (technicalDetails.tools.length > 0) {\n        structuredParts.push(`Tools: ${technicalDetails.tools.join(', ')}`);\n    }\n    \n    if (technicalDetails.technologies.length > 0) {\n        structuredParts.push(`Technologies: ${technicalDetails.technologies.join(', ')}`);\n    }\n    \n    if (technicalDetails.methodologies.length > 0) {\n        structuredParts.push(`Methodologies: ${technicalDetails.methodologies.join(', ')}`);\n    }\n    \n    // Add certificates\n    if (certificatesList.length > 0) {\n        structuredParts.push(`Certificates: ${certificatesList.join(', ')}`);\n    }\n    \n    // Add miscellaneous notes if present\n    if (note && note.trim()) {\n        structuredParts.push(`Additional Info: ${note}`);\n    }\n    \n    // Join with pipe separator\n    const structuredText = structuredParts.filter(Boolean).join(' | ');\n    \n    // Full text for embedding combines structured and natural language\n    const textToEmbed = `${structuredText} | ${conversationText}`;\n  \n  \n  return {\n    json: {\n        id: resource.id,\n        name: resource.name,\n        skills_senior: skills_senior.join(\", \") || \"\",\n        skills_medium: skills_medium.join(\", \") || \"\",\n        skills_junior: skills_junior.join(\", \") || \"\",\n        industry: industries.join(\", \") || \"\",\n        description: description,\n        section: section,\n        seniority: seniority,\n        team:team,\n        department:department,\n        vertical:vertical,\n        coe_manager:coe_manager,\n        el:el,\n        eh:eh,\n        director:director,\n        employment_type:employment_type,\n        certs: certs.join(\", \") || \"\",\n        note: note,\n        embedding_facts_text: structuredText,\n        embedding_convo_text: conversationText,\n        full_payload: resource\n        // embedding_text: embeddingText,\n    }\n  };\n});"
      },
      "id": "c34705b4-bf63-4900-bd46-0c11e1ee8ab9",
      "name": "Process Resources",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        0
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "d8f4da4e-f636-411e-ae3f-8140b5c7f5da",
      "name": "Merge VECTORS and Resources",
      "type": "n8n-nodes-base.merge",
      "position": [
        1568,
        352
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=TRUNCATE TABLE \n  public.resource_facts,\n  public.ganttic_api_resources\n;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        0,
        0
      ],
      "id": "9f9ac4e4-e8c6-4f27-8f0e-ffc3e18e9253",
      "name": "Truncate Resources",
      "credentials": {
        "postgres": {
          "id": "wK2pSCG9jTniRU28",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "page",
              "value": "={{$json[\"next_page\"] || 1}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set Res Page",
      "type": "n8n-nodes-base.set",
      "position": [
        240,
        0
      ],
      "typeVersion": 1,
      "id": "19014b3b-e456-4f39-950e-dbecc74079b3"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('Set Res Page').last().json.page }}",
              "value2": "={{ $('Fetch Ganttic Resources').last().json.pageCount }}"
            }
          ]
        }
      },
      "name": "More Res Pages?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        688,
        608
      ],
      "id": "b8c23789-7aa9-4219-82ad-6349d17bf6a0"
    },
    {
      "parameters": {
        "values": {
          "number": [
            {
              "name": "next_page",
              "value": "={{ $('Set Res Page').item.json.page + 1 }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Increment Res Page",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        528,
        240
      ],
      "id": "db04279c-1162-45bd-99fa-70dd7c86669c"
    },
    {
      "parameters": {
        "amount": 0.3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        224,
        240
      ],
      "id": "38c0b236-33d1-4abe-a5a5-b904dc4e2569",
      "name": "Wait Res",
      "webhookId": "34f21572-31a2-4c5b-a08a-d4be2e33651d"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -416,
        112
      ],
      "id": "4a3c02c7-0b53-4247-a47a-6ccf72b4e3ea",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "jsCode": "return {\n  \"json\": {\n    \"success\": true\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        768
      ],
      "id": "f751ef92-938f-45ec-b713-c4db73471ddc",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.20.70:11434/api/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "nomic-embed-text"
            },
            {
              "name": "prompt",
              "value": "={{ $json.embedding_facts_text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d406a135-4969-4d84-b341-ebc56d7fc405",
      "name": "Generate Facts Vectors",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1248,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.20.70:11434/api/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "nomic-embed-text"
            },
            {
              "name": "prompt",
              "value": "={{ $('Process Resources').item.json.embedding_convo_text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d461fa7e-c17e-431d-a969-28f033c3614f",
      "name": "Generate Convo Vectors",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1600,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.20.70:11434/api/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "nomic-embed-text"
            },
            {
              "name": "prompt",
              "value": "={{ $('Process Resources').item.json.embedding_facts_text }} | {{ $('Process Resources').item.json.embedding_convo_text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "466c3c23-75f8-4c90-9d89-bee7cfc7e44b",
      "name": "Generate Both Vectors",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        912,
        320
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "addSuffix"
            }
          }
        }
      },
      "id": "d971e0bf-b765-41d6-ab5b-9c9ddba61eee",
      "name": "Merge Item with Fact Vectors",
      "type": "n8n-nodes-base.merge",
      "position": [
        1888,
        432
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "addSuffix"
            }
          }
        }
      },
      "id": "362862cc-6dee-4616-99fc-5bde32302ef5",
      "name": "Merge Item with Convo Vectors",
      "type": "n8n-nodes-base.merge",
      "position": [
        2160,
        528
      ],
      "typeVersion": 2
    }
  ],
  "pinData": {},
  "repo_name": "n8n-backup-zm",
  "repo_owner": "zlatkomq",
  "repo_path": "",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-03-28T06:40:37.771Z",
      "updatedAt": "2025-03-28T06:40:37.771Z",
      "role": "workflow:owner",
      "workflowId": "AJ7uWBwYrUxp7CUA",
      "projectId": "hlNkEWAlDmmc5iQw"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-03-31T12:45:21.811Z",
      "updatedAt": "2025-03-31T12:45:21.811Z",
      "id": "mUYuMooITov17Xfj",
      "name": "Ganttic"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-07-28T08:57:12.842Z",
  "versionId": "b08fd09c-1d2c-47b0-a11c-d7558771ee0e"
}